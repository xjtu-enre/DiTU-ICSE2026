// script

use coref::javascript::*

fn all(
    filePath: string,
    callsiteOid: int,
    callsiteStartLine: int,
    callsiteStartColumn: int,
    argNodeType: string,
    argText: string,
    hasAssert_SB: string,
) -> bool {
    let (db = getDefaultDB()) {
        for (kw in ImportKeyword(db)) {
            let (parent = kw.getParent()) {
                // What else can an ImportKeyword's parent be?
                if (isCallExpression(parent) &&
                    filePath = kw.getRelativePath() &&
                    callsiteOid = parent.id &&
                    callsiteStartLine = parent.getStartLineNumber() &&
                    callsiteStartColumn = parent.getStartColumnNumber()
                ) {
                    let (argCount = parent.to<CallExpression>().getArgumentCount()) {
                        if (argCount = 1 &&
                            hasAssert_SB = "false" &&
                            argNodeType = getNodeTypeString(parent.to<CallExpression>().getArgument(0).to<Node>()) &&
                            argText = parent.to<CallExpression>().getArgument(0).getText()
                        ) {
                            return true
                        }

                        if (argCount > 1 &&
                            hasAssert_SB = "true" &&
                            argNodeType = getNodeTypeString(parent.to<CallExpression>().getArgument(0).to<Node>()) &&
                            argText = parent.to<CallExpression>().getArgument(0).getText()
                        ) {
                            return true
                        }
                    }
                }
            }
        }
    }
}

// FIXME: Judge whether an import call is at top-level by the following predicates is not accurate
// E.g.: Inside an object literal
fn notTopLeveled(
    callsiteOid: int,
) -> bool {
    let (db = getDefaultDB()) {
        for (kw in ImportKeyword(db)) {
            let (parent = kw.getParent()) {
                if (isCallExpression(parent) &&
                    callsiteOid = parent.id
                ) {
                    for (path in getNodePath(parent)) {
                        if (isBlockStatement(path)) {
                            return true
                        }
                    }
                }
            }
        }
    }
}

fn main() {
    output(all())
    output(notTopLeveled())
    // Determine whether the function call is a side effect only call is difficult
}
