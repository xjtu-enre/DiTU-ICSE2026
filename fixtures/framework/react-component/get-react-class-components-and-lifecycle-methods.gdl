// script

use coref::javascript::*

schema ReactClassComponent extends ClassLikeDeclaration {}

impl ReactClassComponent {
    @data_constraint
    pub fn __all__(db: JavascriptDB) -> *ReactClassComponent {
        for (file in File(db)) {
            // `import React from 'react';`
            //                                                           v if this is 0, then the latter parameter is not used
            let (localImportName = getLocalImportName(db, file, "react", 0, "-")) {
                for (classDecl in ClassLikeDeclaration(db), heritageClause in HeritageClause(db), propertyAccessExpression in PropertyAccessExpression(db)) {
                    if (file.key_eq(classDecl.getFile()) &&
                        classDecl.key_eq(heritageClause.getParent()) &&
                        heritageClause.key_eq(propertyAccessExpression.getParent().getParent())
                    ) {
                        // Should be PropertyAccessExpression.expression (Identifier)
                        let (propLeft = propertyAccessExpression.getChild(0), propRight = propertyAccessExpression.getChild(1)) {
                            if (isIdentifier(propLeft) &&
                                isIdentifier(propRight) &&
                                propLeft.to<Identifier>().getName() = localImportName &&
                                propRight.to<Identifier>().getName() = "Component"
                            ) {
                                yield ReactClassComponent {
                                    id: classDecl.id
                                }
                            }
                        }
                    }
                }
            }

            // `import {Component} from 'react';`
            let (localImportName = getLocalImportName(db, file, "react", 1, "Component")) {
                for (classDecl in ClassDeclaration(db), heritageClause in HeritageClause(db), identifier in Identifier(db)) {
                    if (file.key_eq(classDecl.getFile()) &&
                        classDecl.key_eq(heritageClause.getParent()) &&
                        heritageClause.key_eq(identifier.getParent().getParent()) &&
                        identifier.getName() = localImportName
                    ) {
                        yield ReactClassComponent {
                            id: classDecl.id
                        }
                    }
                }
            }
        }
    }
}

fn reactClassComponent(
    filePath: string,
    classOid: int,
    // ClassExpression may not have a name
    // classComponentName: string,
    classComponentStartLine: int,
) -> bool {
    let (db = getDefaultDB()) {
        for (rc in ReactClassComponent(db)) {
            if (filePath = rc.getFile().getRelativePath() &&
                classOid = rc.id &&
                // classComponentName = forceGetName(rc.to<Node>()) &&
                classComponentStartLine = rc.getStartLineNumber()
            ) {
                return true
            }
        }
    }
}

fn reactClassComponentLifecycleMethod(
    classOid: int,
    lifecycleMethodName: string,
    lifecycleMethodStartLine: int,
    lifecycleMethodText: string,
    ) -> bool {
    let (db = getDefaultDB()) {
        for (rc in ReactClassComponent(db)) {
            if (classOid = rc.id) {
                // TODO: Class property `shouldComponentUpdate = () => { ... }`
                // Get component lifecycle class methods and all its text
                for (method in MethodDeclaration(db)) {
                    if (rc.key_eq(method.getParent())) {
                        let (methodName = forceGetName(method.to<Node>())) {
                            if (methodName = "componentDidMount" ||
                                methodName = "shouldComponentUpdate" ||
                                methodName = "componentDidUpdate" ||
                                methodName = "componentWillUnmount" ||
                                methodName = "componentDidCatch"
                                // `render` is not our forcus point
                            ) {
                                if (lifecycleMethodName = methodName &&
                                    lifecycleMethodStartLine = method.getStartLineNumber() &&
                                    lifecycleMethodText = method.getText()
                                ) {
                                    return true
                                }
                            }
                        }
                    }
                }
                // Get constructor
                for (constructor in ConstructorDeclaration(db)) {
                    if (rc.key_eq(constructor.getParent()) &&
                        lifecycleMethodName = "constructor" &&
                        lifecycleMethodStartLine = constructor.getStartLineNumber() &&
                        lifecycleMethodText = constructor.getText()
                    ) {
                        return true
                    }
                }
            }
        }
    }
}

fn main() {
    output(reactClassComponent())
    output(reactClassComponentLifecycleMethod())
}
