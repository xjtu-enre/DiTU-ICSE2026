// script
use coref::javascript::*

schema FunctionArgumentsPair {
    @primary funcId: int,
    argId: int,
}

impl FunctionArgumentsPair {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *FunctionArgumentsPair {
        for (id in Identifier(db)) {
            if (id.getText() = "arguments" &&
                // Is not the right part of a PropertyAccessExpression `a.arguments`
                (
                    // Using !isPropertyAccessExpression() will cause unground error
                    id.getParent().getKind() != 205 ||
                    id.getParent().getLastChild().key_neq(id)
                )
            ) {
                let (enclosing = id.to<Node>().getEnclosingFunction()) {
                    yield FunctionArgumentsPair {
                        funcId: enclosing.id,
                        argId: id.id,
                    }
                }   
            }
        }
    }

    pub fn getFunction(self) -> FunctionLikeDeclaration {
        return FunctionLikeDeclaration {id: self.funcId}
    }

    pub fn getIdentifier(self) -> Identifier {
        return Identifier {id: self.argId}
    }
}

fn function(
    filePath: string,
    functionOid: int,
    functionStartLine: int,
    functionStartColumn: int,
    paramCount: int,
    isLastParamRestParam_SB: string,
) -> bool {
    let (db = getDefaultDB()) {
        for (pair in FunctionArgumentsPair(db)) {
            let (func = pair.getFunction()) {
                if (filePath = func.getRelativePath() &&
                    functionOid = func.id &&
                    functionStartLine = func.getStartLineNumber() &&
                    functionStartColumn = func.getStartColumnNumber() &&
                    paramCount = func.to<FunctionLikeDeclaration>().getParameterCount()
                ) {
                    if (paramCount = 0 &&
                        isLastParamRestParam_SB = "-"
                    ) {
                        return true
                    }

                    if (paramCount != 0) {
                        let (lastParam = func.getParameter(paramCount - 1)) {
                            if (lastParam.isRestParameter() &&
                                isLastParamRestParam_SB = "true"
                            ) {
                                return true
                            }

                            if (!lastParam.isRestParameter() &&
                                isLastParamRestParam_SB = "false"
                            ) {
                                return true
                            }
                        }
                    }
                }
            }
        }
    }
}

fn argumentsContext(
    filePath: string,
    argumentsOid: int,
    argumentsStartLine: int,
    argumentsStartColumn: int,
    parentNodeType: string,
) -> bool {
    let (db = getDefaultDB()) {
        for (pair in FunctionArgumentsPair(db)) {
            let (id = pair.getIdentifier()) {
                if (filePath = id.getRelativePath() &&
                    argumentsOid = id.id &&
                    argumentsStartLine = id.getStartLineNumber() &&
                    argumentsStartColumn = id.getStartColumnNumber() &&
                    parentNodeType = getNodeTypeString(id.getParent())
                ) {
                    return true
                }
            }
        }
    }
}

fn main() {
    output(function())
    output(argumentsContext())
}