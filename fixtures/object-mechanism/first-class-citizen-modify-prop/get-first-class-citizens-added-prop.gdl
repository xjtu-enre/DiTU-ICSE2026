// script

use coref::javascript::*

/**
 * This function only supports query cases whose def and usage are in the same file
 */
// FIXME: The citizen name can be the same as a variable, thus the callsite is actually referencing a variable
fn out(
    filePath: string,
    citizenOid: int,
    // "Function" / "Class"
    citizenType: string,
    citizenStartLine: int,
    citizenStartColumn: int,
    callsiteStartLine: int,
    callsiteStartColumn: int,
    leftNodeType: string,
    rightNodeType: string,
) -> bool {
    let (db = getDefaultDB()) {
        for (be in BinaryExpression(db)) {
            if (filePath = be.getRelativePath() &&
                callsiteStartLine = be.getStartLineNumber() &&
                callsiteStartColumn = be.getStartColumnNumber() &&
                isEqualsToken(be.getOperator().to<Node>()) &&
                leftNodeType = getNodeTypeString(be.getLeft().to<Node>()) &&
                rightNodeType = getNodeTypeString(be.getRight().to<Node>())
            ) {
                let (citizenName = getLeftMostIdentifierFromAccessExpression(be.getLeft().to<Node>())) {
                    for (func in FunctionLikeDeclaration(db)) {
                        if (func.getFile() = be.getFile() &&
                            // This ensures no matching between a function and a local variable with the same name (at some extent)
                            func.getParent() = be.getParent().getParent() &&
                            func.getName() = citizenName.getName() &&
                            citizenType = "Function" &&
                            citizenOid = func.id &&
                            citizenStartLine = func.getStartLineNumber() &&
                            citizenStartColumn = func.getStartColumnNumber() &&
                            // These two lines restrict that callsite is after declaration
                            callsiteStartLine > citizenStartLine
                        ) {
                            return true
                        }
                    }

                    for (clz in ClassDeclaration(db)) {
                        if (clz.getFile() = be.getFile() &&
                            clz.getParent() = be.getParent().getParent() &&
                            forceGetName(clz.to<Node>()) = citizenName.getName() &&
                            citizenType = "Class" &&
                            citizenOid = clz.id &&
                            citizenStartLine = clz.getStartLineNumber() &&
                            citizenStartColumn = clz.getStartColumnNumber() &&
                            callsiteStartLine > citizenStartLine
                        ) {
                            return true
                        }
                    }
                }
            }
        }
    }
}

fn main() {
    output(out())
}
